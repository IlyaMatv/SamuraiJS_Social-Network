{"version":3,"sources":["api/api.js","hoc/withAuthRedirect.js","redux/users-reducer.js","assets/images/loader.svg","components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","redux/dialogs-reducer.js","components/Dialogs/DIalogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/Header/Header.jsx","redux/auth-reducer.js","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","redux/app-reducer.js","redux/sitebar-reducer.js","redux/redux-store.js","hoc/withSuspense.js","App.js","serviceWorker.js","index.js","components/common/FormsControls/FormsControls.js","utils/validators/validators.js","components/common/Preloader/Preloader.js","components/common/FormsControls/FormControls.module.css","components/Header/Header.module.css","redux/profile-reducer.js"],"names":["instance","axios","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","initialState","users","totalUsersCount","isFetching","followingInProgress","followSuccess","type","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","a","items","count","totalCount","followUnfollowFlow","apiMethod","actionCreator","resultCode","bind","usersReducer","action","map","u","id","followed","filter","module","exports","Navbar","className","classes","nav","item","activeClassName","active","friends","friendsItem","News","Music","Settings","dialogs","name","messages","message","dialogsReducer","body","newMessageBody","DialogItem","dialog","Message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","d","key","messagesElements","m","dialogsItems","values","sendMessage","compose","sendMessageCreator","Header","header","src","loginBlock","onClick","SET_USER_DATA","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","url","authReducer","HeaderContainer","LoginReduxForm","error","Input","length","stopSubmit","_error","initialized","appReducer","sitebarReducer","reducers","combineReducers","profilePage","profileReducer","sitebar","usersPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","window","withSuspense","Suspense","fallback","Preloader","UsersContainer","lazy","ProfileContainer","App","initializeApp","exact","path","render","DialogsContainer","AppContainer","withRouter","SamuraiJSApp","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","input","meta","child","hasError","touched","formControl","children","restProps","createField","validators","text","value","maxLength","style","position","loader","posts","likesCount","addPostActionCreator","newPostText","setStatus","getUserProfile","file","photos","getState","Promise","reject","newPost"],"mappings":"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","file":"static/js/main.d2457f9e.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:     {\r\n        \"API-KEY\": \"c10a4fa1-fbf0-4425-916e-5328e3c50e22\"\r\n    }\r\n});\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId) {\r\n        console.warn('Obsolete method. Please profileAPI object.')\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status`, { status: status });\r\n    },\r\n    savePhoto(photoFile) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n    saveProfile(profile) {\r\n        return instance.put(`profile`, profile );\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`);\r\n    },\r\n    login(email, password, rememberMe = false, captcha = null) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe, captcha });\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`);\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import { usersAPI } from \"../api/api\"\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nlet initialState = {\r\n  users: [],\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: true }\r\n          }\r\n          return u\r\n        })\r\n      }\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: false }\r\n          }\r\n          return u\r\n        })\r\n      }\r\n    case SET_USERS: {\r\n      return { ...state, users: action.users }\r\n    }\r\n    case SET_CURRENT_PAGE: {\r\n      return { ...state, currentPage: action.currentPage }\r\n    }\r\n    case SET_TOTAL_USERS_COUNT: {\r\n      return { ...state, totalUsersCount: action.count }\r\n    }\r\n    case TOGGLE_IS_FETCHING: {\r\n      return { ...state, isFetching: action.isFetching }\r\n    }\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter(id => id != action.userId)\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId })\r\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId })\r\nexport const setUsers = (users) => ({ type: SET_USERS, users })\r\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage })\r\nexport const setUsersTotalCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\nexport const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching })\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\r\n\r\n\r\n\r\n\r\nexport const requestUsers = (page, pageSize) => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n\r\n    let data = await usersAPI.getUsers(page, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setUsersTotalCount(data.totalCount))\r\n  }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n  dispatch(toggleFollowingProgress(true, userId))\r\n  let response = await apiMethod(userId)\r\n\r\n  if (response.data.resultCode == 0) {\r\n    dispatch(actionCreator(userId))\r\n  }\r\n\r\n  dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId) => {\r\n  return async (dispatch) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n  }\r\n}\r\n\r\nexport const unfollow = (userId) => {\r\n  return async (dispatch) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n  }\r\n}\r\n\r\n\r\nexport default usersReducer","module.exports = __webpack_public_path__ + \"static/media/loader.fa650ff8.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__25nyM\",\"item\":\"Navbar_item__1OT07\",\"active\":\"Navbar_active__3F2aa\",\"friends\":\"Navbar_friends__U0-c9\",\"friendsItem\":\"Navbar_friendsItem__2b2dx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1XLGt\",\"dialogsItems\":\"Dialogs_dialogsItems__3yszK\",\"active\":\"Dialogs_active__1wxy_\",\"dialog\":\"Dialogs_dialog__2JXDU\",\"messages\":\"Dialogs_messages__23Soc\",\"message\":\"Dialogs_message__2s3C0\"};","import React from 'react'\r\nimport classes from './Navbar.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Navbar = (props) => {\r\n\r\n\r\n  // let friends = props.state.friends.map( f => <div>{f.name}</div> )\r\n\r\n\r\n  return (\r\n    <div className={classes.nav}>\r\n      <nav>\r\n        <div className={classes.item}>\r\n          <NavLink to='/profile' activeClassName={classes.active}>Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/dialogs' activeClassName={classes.active}>Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/users' activeClassName={classes.active}>Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/news' activeClassName={classes.active}>News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/music' activeClassName={classes.active}>Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n          <NavLink to='/settings' activeClassName={classes.active}>Settings</NavLink>\r\n        </div>\r\n      </nav>\r\n      <div className={classes.friends}>\r\n        <h2>Friends</h2>\r\n        <div className={classes.friendsItem}>\r\n          {/* { friends } */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\nimport classes from './News.module.css'\r\n\r\nconst News = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react'\r\nimport classes from './Music.module.css'\r\n\r\nconst Music = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react'\r\nimport classes from './Settings.module.css'\r\n\r\nconst Settings = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","const SEND_MESSAGE = 'SEND_MESSAGE'\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 1, name: 'Dimych' },\r\n    { id: 2, name: 'Andrey' },\r\n    { id: 3, name: 'Sveta' },\r\n    { id: 4, name: 'Sasha' },\r\n    { id: 5, name: 'Victor' },\r\n    { id: 6, name: 'Valera' }\r\n  ],\r\n  messages: [\r\n    { id: 1, message: 'Hi' },\r\n    { id: 2, message: 'How is your it-kamasutra' },\r\n    { id: 3, message: 'Yo' },\r\n    { id: 4, message: 'Yo' },\r\n    { id: 5, message: 'Yo' }\r\n  ]\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case SEND_MESSAGE:\r\n      let body = action.newMessageBody\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, { id: 6, message: body }]\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nexport const sendMessageCreator = (newMessageBody) => {\r\n  return {\r\n    type: SEND_MESSAGE,\r\n    newMessageBody\r\n  }\r\n}\r\n\r\n\r\nexport default dialogsReducer","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n\r\n    return (\r\n        <div className={classes.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message","import React from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from './DIalogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { TextArea } from '../common/FormsControls/FormsControls'\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators'\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />)\r\n    let newMessageBody = state.newMessageBody\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'} />\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea}\r\n                    validate={[required, maxLength50]}\r\n                    name='newMessageBody'\r\n                    placeholder='Enter your message'\r\n\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm)\r\n\r\nexport default Dialogs\r\n","import React from 'react'\r\nimport { sendMessageCreator } from '../../redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n","import React from 'react';\r\nimport classes from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img src='https://www.freelogodesign.org/Content/img/logo-samples/sailors.png' />\r\n\r\n            <div className={classes.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null // if null, then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n    type: SET_USER_DATA, payload:\r\n        {userId, email, login, isAuth}\r\n});\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\r\n});\r\n\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    let response = await authAPI.me();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email, password, rememberMe, captcha) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (response.data.resultCode === 0) {\r\n        // success, get auth data\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (response.data.resultCode === 10) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url;\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\n\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport default authReducer;","import React from 'react'\r\nimport Header from './Header'\r\nimport { connect } from 'react-redux'\r\nimport { logout } from '../../redux/auth-reducer'\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n\r\n    // componentDidMount() {\r\n    //     this.props.getAuthUserData()\r\n    // }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, { logout })(HeaderContainer);","import React from 'react'\r\nimport { reduxForm, Field } from 'redux-form'\r\nimport { Input } from '../common/FormsControls/FormsControls'\r\nimport { required } from '../../utils/validators/validators'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom'\r\nimport classes from './../common/FormsControls/FormControls.module.css'\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} >\r\n            <div>\r\n                <Field\r\n                    validate={[required]}\r\n                    placeholder={'Email'}\r\n                    name={'email'}\r\n                    component={Input}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    validate={[required]}\r\n                    placeholder={'Password'}\r\n                    type={'password'}\r\n                    name={'password'}\r\n                    component={Input}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    component={Input}\r\n                    name={'rememberMe'}\r\n                    type={'checkbox'}\r\n                /> remember me\r\n            </div>\r\n\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            { error && <div className={'formSummaryError'}>\r\n                {error}\r\n            </div> }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return <div>\r\n        <h1>\r\n            LOGIN\r\n                </h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login)","import { authAPI } from \"../api/api\"\r\nimport { stopSubmit } from \"redux-form\"\r\nimport { getAuthUserData } from \"./auth-reducer\"\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\nlet initialState = {\r\n  initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        initialized: true\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const initializedSuccess = () => ({ type: INITIALIZED_SUCCESS })\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n\r\n  dispatch(getAuthUserData())\r\n    .then(() => {\r\n      dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\n\r\nexport default appReducer","let initialState = {\r\n    friends: [\r\n        {name: 'Ilya'},\r\n        {name: 'Stomka'},\r\n        {name: 'Alexey'}\r\n    ]\r\n}\r\n\r\nconst sitebarReducer = (state = initialState, action) => {\r\n    \r\n    return state\r\n}\r\n\r\nexport default sitebarReducer","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sitebarReducer from \"./sitebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sitebar: sitebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react'\r\nimport Preloader from '../components/common/Preloader/Preloader'\r\n\r\n\r\n\r\n\r\nexport const withSuspense = (Component) => {\r\n\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader />}>\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport { Route, withRouter, Switch, Redirect, HashRouter } from 'react-router-dom';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { initializeApp } from './redux/app-reducer'\nimport Preloader from './components/common/Preloader/Preloader';\n\nimport store from './redux/redux-store'\nimport { Provider } from 'react-redux'\nimport { withSuspense } from './hoc/withSuspense';\n\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\n\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.initializeApp()\n  }\n\n  render() {\n\n    if (!this.props.initialized) {\n      return <Preloader />\n    }\n\n\n    return (\n\n      <div className='app-wrapper'>\n        <HeaderContainer />\n        <Navbar />\n\n        <div className='app-wrapper-content'>\n          <Switch>\n            <Route exact path='/' render={() => <Redirect to={\"/profile\"} />} />\n            <Route path='/dialogs' render={() => <DialogsContainer />} />\n            <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)} />\n            <Route path='/users' render={withSuspense(UsersContainer)} />\n            <Route path='/news' component={News} />\n            <Route path='/music' component={Music} />\n            <Route path='/settings' component={Settings} />\n            <Route path='/login' render={() => <Login />} />\n            <Route path='*' render={() => <div>404 NOT FOUND</div>} />\n          </Switch>\n        </div>\n\n      </div>\n\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => ({\n  initialized: state.app.initialized\n})\n\n\nlet AppContainer = compose(\n  withRouter,\n  connect(mapStateToProps, { initializeApp }))(App)\n\n\nconst SamuraiJSApp = (props) => {\n  return <HashRouter>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </HashRouter>\n}\n\nexport default SamuraiJSApp","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport store from './redux/redux-store'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport SamuraiJSApp from './App'\n\n\n\nReactDOM.render(\n    <SamuraiJSApp />, document.getElementById('root'));\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\r\nimport classes from './FormControls.module.css'\r\nimport { Field } from 'redux-form'\r\n\r\n\r\nconst FormControl = ({ input, meta, child, ...props }) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={classes.formControl + ' ' + (hasError ? classes.error : ' ')}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            { hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea = (props) => {\r\n    const { input, meta, child, ...restProps } = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restProps } = props\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field \r\n            placeholder={placeholder} \r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n)","\r\nexport const required = (value) => {\r\n    if (value) return undefined\r\n\r\n    return 'field if required'\r\n    \r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n","import React from 'react'\r\nimport loader from '../../../assets/images/loader.svg'\r\n\r\nconst Preloader = (props) => {\r\n\r\n    return (\r\n        <div style={{ position: \"absolute\" }}>\r\n            <img src={loader} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2Brrh\",\"error\":\"FormControls_error__3npLN\",\"formSummaryError\":\"FormControls_formSummaryError__GfZeJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__wn5_o\",\"loginBlock\":\"Header_loginBlock__dHthH\"};","import { usersAPI, profileAPI } from \"../api/api\"\r\nimport { stopSubmit } from \"redux-form\"\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS'\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Hi, how are you?', likesCount: 12 },\r\n    { id: 2, message: 'It\\'s my first post', likesCount: 11 },\r\n    { id: 3, message: 'It\\'s my first post', likesCount: 5 },\r\n    { id: 4, message: 'It\\'s my first post', likesCount: 3 }\r\n  ],\r\n  profile: null,\r\n  status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case ADD_POST: {\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.newPostText,\r\n        likesCount: 0\r\n      }\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n        newPostText: ''\r\n      }\r\n    }\r\n    case SET_STATUS: {\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      }\r\n    }\r\n    case SET_USER_PROFILE: {\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n      }\r\n    }\r\n    case SAVE_PHOTO_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos }\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText) => {\r\n  return {\r\n    type: ADD_POST,\r\n    newPostText\r\n  }\r\n}\r\n\r\nexport const setUserProfile = (profile) => {\r\n  return {\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n  }\r\n}\r\n\r\nexport const setStatus = (status) => {\r\n  return {\r\n    type: SET_STATUS,\r\n    status\r\n  }\r\n}\r\n\r\nexport const savePhotoSuccess = (photos) => {\r\n  return {\r\n    type: SAVE_PHOTO_SUCCESS,\r\n    photos\r\n  }\r\n}\r\n\r\n//thunk\r\nexport const getUserProfile = (userId) => async (dispatch) => {\r\n  let response = await usersAPI.getProfile(userId)\r\n  dispatch(setUserProfile(response.data))\r\n}\r\n\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n  let response = await profileAPI.getStatus(userId)\r\n  dispatch(setStatus(response.data))\r\n}\r\n\r\nexport const updateStatus = (status) => async (dispatch) => {\r\n  let response = await profileAPI.updateStatus(status)\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(setStatus(status))\r\n  }\r\n}\r\n\r\nexport const savePhoto = (file) => async (dispatch) => {\r\n  let response = await profileAPI.savePhoto(file)\r\n\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(savePhotoSuccess(response.data.data.photos))\r\n  }\r\n}\r\n\r\nexport const saveProfile = (profile) => async (dispatch, getState) => {\r\n  const userId = getState().auth.userId\r\n  let response = await profileAPI.saveProfile(profile)\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(getUserProfile(userId))\r\n  } else {\r\n    dispatch(stopSubmit(\"editProfile\", {_error: response.data.messages[0]}))\r\n    return Promise.reject(response.data.messages[0])\r\n  }\r\n}\r\n\r\nexport default profileReducer"],"sourceRoot":""}